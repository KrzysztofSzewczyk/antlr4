TestFile(file) ::= <<
/* This file is generated by TestGenerator, any edits will be overwritten by the next generation. */
package org.antlr.v4.test.runtime.go;

import org.junit.Ignore;
import org.junit.Test;

import static org.junit.Assert.*;

<if(file.Options.("ImportGrammar"))>
import org.antlr.v4.tool.Grammar;
<endif>

public class Test<file.name> extends BaseTest {

	<file.tests:{test | <test>}; separator="\n", wrap, anchor>

}<\n>
>>

LexerTestMethod(test) ::= <<
/* This file and method are generated by TestGenerator, any edits will be overwritten by the next generation. */
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(parserpkgdir);
<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
	writeFile(parserpkgdir, "<grammar>.g4", slave_<grammar>);
	}; separator="\n">

<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>
	<test.afterGrammar>
	String input =<writeStringLiteral(test.Input)>;
	String found = execLexer("<grammar>.g4", grammar, "<grammar><if(test.Options.("CombinedGrammar"))>Lexer<endif>", input, <writeBoolean(test.Options.("ShowDFA"))>);
	assertEquals(<writeStringLiteral(test.Output)>, found);
	<if(!isEmpty.(test.Errors))>
	assertEquals(<writeStringLiteral(test.Errors)>, this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
    }>
}
>>


CompositeLexerTestMethod(test) ::= <<
<LexerTestMethod(test)>
>>

ParserTestMethod(test) ::= <<
/* This file and method are generated by TestGenerator, any edits will be overwritten by the next generation. */
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(parserpkgdir);
<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
<if(test.Options.("SlaveIsLexer"))>
	rawGenerateAndBuildRecognizer("<grammar>.g4", slave_<grammar>, null, "<grammar>");
<else>
	writeFile(parserpkgdir, "<grammar>.g4", slave_<grammar>);
<endif>
	}; separator="\n">
<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>
	<test.afterGrammar>
	String input =<writeStringLiteral(test.Input)>;
	String found = execParser("<grammar>.g4", grammar, "<grammar>Parser", "<grammar>Lexer",
	                          "<grammar>Listener", "<grammar>Visitor",
	                          "<test.Rule>", input, <writeBoolean(test.Options.("Debug"))>);
	assertEquals(<writeStringLiteral(test.Output)>, found);
	<if(!isEmpty.(test.Errors))>
	assertEquals(<writeStringLiteral(test.Errors)>, this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
    }>
}
>>

CompositeParserTestMethod(test) ::= <<
<ParserTestMethod(test)>
>>

AbstractParserTestMethod(test) ::= <<
String test<test.name>(String input) throws Exception {
	String grammar = <test.grammar.lines:{ line | "<line>};separator="\\n\" +\n", wrap, anchor>";
	return execParser("<test.grammar.grammarName>.g4", grammar, "<test.grammar.grammarName>Parser", "<test.grammar.grammarName>Lexer", "<test.startRule>", input, <test.debug>);
}

>>

ConcreteParserTestMethod(test) ::= <<
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	String found = test<test.baseName>("<test.input>");
	assertEquals("<test.expectedOutput>", found);
	<if(test.expectedErrors)>
	assertEquals("<test.expectedErrors>", this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
}

>>

testAnnotations(test) ::= <%
@Test
<if(test.Options.("Timeout"))>
(timeout = <test.Options.("Timeout")>)
<endif>
<if(test.Options.("Ignore"))>
<\n>@Ignore(<writeStringLiteral(test.Options.("Ignore"))>)
<elseif(IgnoredTests.(({<file.name>.<test.name>})))>
<\n>@Ignore(<writeStringLiteral(IgnoredTests.(({<file.name>.<test.name>})))>)
<endif>
%>

buildStringLiteral(text, variable) ::= <<
StringBuilder <variable>Builder = new StringBuilder(<strlen.(text)>);
<lines.(text):{line|<variable>Builder.append("<escape.(line)>");}; separator="\n">
String <variable> = <variable>Builder.toString();
>>

writeStringLiteral(text) ::= <%
<if(isEmpty.(text))>
""
<else>
<writeLines(lines.(text))>
<endif>
%>

writeLines(textLines) ::= <%
<if(rest(textLines))>
<textLines:{line|
<\n>		"<escape.(line)>}; separator="\" +">"
<else>
"<escape.(first(textLines))>"
<endif>
%>





string(text) ::= <<
"<escape.(text)>"
>>

writeBoolean(o) ::= "<if(o && !isEmpty.(o))>true<else>false<endif>"

writeln(s) ::= <<fmt.Println(<s>);>>

write(s) ::= <<fmt.Print(<s>);>>

False() ::= "false"

True() ::= "true"

Not(v) ::= "!<v>"

Assert(s) ::= <<assert(<s>);>>

Cast(t,v) ::= "((<t>)<v>)"

Append(a,b) ::= "<a> + <b>"

Concat(a,b) ::= "<a><b>"

DeclareLocal(s,v) ::= "Object <s> = <v>;"

AssertIsList(v) ::= "List\<?> __ttt__ = <v>;" // just use type system

AssignLocal(s,v) ::= "<s> = <v>;"

InitIntMember(n,v) ::= <%int <n> = <v>;%>

InitBooleanMember(n,v) ::= <%bool <n> = <v>;%>

GetMember(n) ::= <%this.<n>%>

SetMember(n,v) ::= <%this.<n> = <v>;%>

AddMember(n,v) ::= <%this.<n> += <v>;%>

PlusMember(v,n) ::= <%<v> + this.<n>%>

MemberEquals(n,v) ::= <%this.<n> == <v>%>

ModMemberEquals(n,m,v) ::= <%this.<n> % <m> == <v>%>

ModMemberNotEquals(n,m,v) ::= <%this.<n> % <m> != <v>%>

DumpDFA() ::= "this.DumpDFA();"

Pass() ::= ""

StringList() ::= "List\<String>"

BuildParseTrees() ::= "SetBuildParseTree(true);"

BailErrorStrategy() ::= <%SetErrorHandler(new BailErrorStrategy());%>

ToStringTree(s) ::= <%<s>.toStringTree(this)%>

Column() ::= "this.GetCharPositionInLine()"

Text() ::= "this.GetText()"

ValEquals(a,b) ::= <%<a>==<b>%>

TextEquals(a) ::= <%this.GetText().equals("<a>")%>

PlusText(a) ::= <%"<a>" + this.GetText()%>

InputText() ::= "this._input.GetText()"

LTEquals(i, v) ::= <%this._input.LT(<i>).GetText().equals(<v>)%>

LANotEquals(i, v) ::= <%this._input.LA(<i>)!=<v>%>

TokenStartColumnEquals(i) ::= <%this._tokenStartCharPositionInLine==<i>%>

ImportListener(X) ::= ""

GetExpectedTokenNames() ::= "this.GetExpectedTokens().toString(this.tokenNames)"

RuleInvocationStack() ::= "GetRuleInvocationStack()"

LL_EXACT_AMBIG_DETECTION() ::= <<_interp.SetPredictionMode(PredictionModeLL_EXACT_AMBIG_DETECTION);>>

ParserPropertyMember() ::= <<
@members {
bool Property() {
  return true;
}
}
>>

PositionAdjustingLexer() ::= <<
package antlrtest

//@Override
func (this *PositionAdjustingLexer) NextToken() *Token {
	if (!(_interp instanceof PositionAdjustingLexerATNSimulator)) {
		_interp = new PositionAdjustingLexerATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
	}

	return super.nextToken();
}

//@Override
func (this *PositionAdjustingLexer) Emit() *Token {
	switch (_type) {
	case TOKENS:
		HandleAcceptPositionForKeyword("tokens");

	case LABEL:
		HandleAcceptPositionForIdentifier();
	}

	return super.emit();
}

func (this *PositionAdjustingLexer) HandleAcceptPositionForIdentifier() bool {
	String tokenText = GetText();
	int identifierLength = 0;
	for (identifierLength \< tokenText.length() && isIdentifierChar(tokenText.charAt(identifierLength))) {
		identifierLength++;
	}

	if (GetInputStream().Index() > _tokenStartCharIndex + identifierLength) {
		int offset = identifierLength - 1;
		GetInterpreter().ResetAcceptPosition(GetInputStream(), _tokenStartCharIndex + offset, _tokenStartLine, _tokenStartCharPositionInLine + offset);
		return true;
	}

	return false;
}

func (this *PositionAdjustingLexer) HandleAcceptPositionForKeyword(keyword string) bool {
	if (GetInputStream().Index() > _tokenStartCharIndex + keyword.length()) {
		int offset = keyword.length() - 1;
		this.GetInterpreter().ResetAcceptPosition(GetInputStream(), _tokenStartCharIndex + offset, _tokenStartLine, _tokenStartCharPositionInLine + offset);
		return true;
	}

	return false;
}

//@Override
func (s *PositionAdjustingLexerATNSimulator) GetInterpreter() *LexerATNSimulator {
	return s // return super.(*PositionAdjustingLexerATNSimulator).GetInterpreter();
}

bool isIdentifierChar(char c) {
	return Character.isLetterOrDigit(c) || c == '_';
}

type PositionAdjustingLexerATNSimulator struct {
    *antlr4.LexerATNSimulator
}

func NewPositionAdjustingLexerATNSimulator(recog antlr4.ILexer, atn *antlr4.ATN, decisionToDFA []*antlr4.DFA, sharedContextCache *PredictionContextCache) *PositionAdjustingLexerATNSimulator {
    super(recog, atn, decisionToDFA, sharedContextCache);
}

func ResetAcceptPosition(input CharStream, index, line, charPositionInLine int) {
    input.seek(index);
    this.line = line;
    this.charPositionInLine = charPositionInLine;
    consume(input);
}

>>

BasicListener(X) ::= <<
type LeafListener extends TBaseListener {
	func visitTerminal(TerminalNode node) {
		fmt.Println(node.GetSymbol().GetText())
	}
}
>>

WalkListener(s) ::= <<
ParseTreeWalker walker = new ParseTreeWalker();
walker.walk(new LeafListener(), <s>);
>>

TokenGetterListener(X) ::= <<
type LeafListener extends TBaseListener {
	func ExitA(TParser.AContext ctx) {
		if (ctx.GetChildCount()==2)
			fmt.Printf("%s %s %s",ctx.INT(0).GetSymbol().GetText(),
				ctx.INT(1).GetSymbol().GetText(),ctx.INT());
		else
			fmt.Println(ctx.ID().GetSymbol())
	}
}
>>

RuleGetterListener(X) ::= <<
type LeafListener extends TBaseListener {
	func ExitA(TParser.AContext ctx) {
		if (ctx.GetChildCount()==2) {
			fmt.Printf("%s %s %s",ctx.b(0).start.GetText(),
				ctx.b(1).start.GetText(),ctx.b().Get(0).start.GetText());
		} else
			fmt.Println(ctx.b(0).start.GetText());
	}
}
>>


LRListener(X) ::= <<
type LeafListener extends TBaseListener {
	func ExitE(TParser.EContext ctx) {
		if (ctx.GetChildCount()==3) {
			fmt.Printf("%s %s %s\n",ctx.e(0).start.GetText(),
				ctx.e(1).start.GetText(), ctx.e().Get(0).start.GetText());
		} else
			fmt.Println(ctx.INT().GetSymbol().GetText());
	}
}
>>

LRWithLabelsListener(X) ::= <<
type LeafListener extends TBaseListener {
	func ExitCall(TParser.CallContext ctx) {
		fmt.Printf("%s %s",ctx.e().start.GetText(),ctx.eList());
	}
	func ExitInt(TParser.IntContext ctx) {
		fmt.Println(ctx.INT().GetSymbol().GetText());
	}
}
>>

DeclareContextListGettersFunction() ::= <<
func foo() {
	SContext s = null;
	List\<? extends AContext> a = s.a();
	List\<? extends BContext> b = s.b();
}
>>

Declare_foo() ::= <<
	func foo() {fmt.Println("foo")}
>>

Invoke_foo() ::= "foo();"

Declare_pred() ::= <<bool pred(bool v) {
	fmt.Println("eval="+fmt.Sprint(v))
	return v
}
>>

Invoke_pred(v) ::= <<this.pred(<v>)>>

IgnoredTests ::= [
	default: false
]

isEmpty ::= [
	"": true,
	default: false
]
