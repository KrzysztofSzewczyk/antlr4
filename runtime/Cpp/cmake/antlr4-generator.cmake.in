set(ANTLR_VERSION @ANTLR_VERSION@)

@PACKAGE_INIT@

if (NOT ANTLR4_CPP_GENERATED_SRC_DIR)
  set(ANTLR4_GENERATED_SRC_DIR ${CMAKE_BINARY_DIR}/antlr4_generated_src)
endif()

FIND_PACKAGE(Java COMPONENTS Runtime REQUIRED)

#
# The ANTLR generator will output the following files given the input file f.g4
#
# Input  -> f.g4
# Output -> f.h
#        -> f.cpp
#
# the following files will only be produced if there is a parser contained
# Flag -visitor active
# Output -> <f>BaseVisitor.h
#        -> <f>BaseVisitor.cpp
#        -> <f>Visitor.h
#        -> <f>Visitor.cpp
#
# Flag -listener active
# Output -> <f>BaseListener.h
#        -> <f>BaseListener.cpp
#        -> <f>Listener.h
#        -> <f>Listener.cpp
#
# The function "antlr4_generate" will generate the required setup to call ANTLR for a given input file
# 
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# | Argument# | Required  | Defaults to |                                                                              |
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# |     0     |   Yes     |    n/a      | Unique target name. It is used to generate CMake Variables to reference the  |
# |           |           |             | various outputs of the generation                                            |
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# |     1     |   Yes     |    n/a      | Input file containing the lexer/parser definition                            |  
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# |     2     |    No     |    FALSE    | Boolean to indicate if a listener interface should be generated              |
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# |     3     |    No     |    FALSE    | Boolean to indicate if a visitor interface should be generated               |
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# |     4     |    No     |    none     | C++ namespace in which the generated classes should be placed                |
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# |     5     |    No     |    none     | Additional files on which the input depends                                  |
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
# |     6     |    No     |    none     | Library path to use during generation                                        |
# +-----------+-----------+-------------+------------------------------------------------------------------------------+
#
# The ANTLR4_JAR_LOCATION must be set prior calling the function!
#
# The following CMake variables are available following a call to antlr4_generate
#
#  ANTLR4_INCLUDE_DIR_<Target name>       - Directory containing the generated header files
#  ANTLR4_SRC_FILES_<Target name>         - List of generated source files
#  ANTLR4_TOKEN_FILES_<Target name>       - List of generated token files
#  ANTLR4_TOKEN_DIRECTORY_<Target name>   - Directory containing the generated token files
#
# Sample:
#
# # Bring in the required packages
# find_package(antlr4-runtime REQUIRED)
# find_package(antlr4-generator REQUIRED)
# 
# # Set path to generator
# set(ANTLR4_JAR_LOCATION ${PROJECT_SOURCE_DIR}/thirdparty/antlr/antlr-4.7.1-complete.jar)
# 
# # generate lexer
# antlr4_generate( 
#   antlrcpptest_lexer
#   ${CMAKE_CURRENT_SOURCE_DIR}/TLexer.g4
#   FALSE
#   FALSE
#   "antlrcpptest"
#   )
# 
# # generate parser
# antlr4_generate( 
#   antlrcpptest_parser
#   ${CMAKE_CURRENT_SOURCE_DIR}/TParser.g4
#   FALSE
#   TRUE
#   "antlrcpptest"
#   "${ANTLR4_TOKEN_FILES_antlrcpptest_lexer}"
#   "${ANTLR4_TOKEN_DIRECTORY_antlrcpptest_lexer}"
#   )
# 
# # add directories for generated include files
# include_directories( ${PROJECT_BINARY_DIR} ${ANTLR4_INCLUDE_DIR_antlrcpptest_lexer} ${ANTLR4_INCLUDE_DIR_antlrcpptest_parser} )
# 
# # add generated source files
# add_executable( Parsertest main.cpp ${ANTLR4_SRC_FILES_antlrcpptest_lexer} ${ANTLR4_SRC_FILES_antlrcpptest_parser} )
# 
# # add required runtime library
# add_dependencies( Parsertest antlr4_shared )
# 
# target_link_libraries( Parsertest PRIVATE 
#                        antlr4_shared)
# 
# 
function(antlr4_generate
    Antlr4_ProjectTarget
    Antlr4_InputFile
    )

  set( Antlr4_GeneratedSrcDir ${ANTLR4_GENERATED_SRC_DIR}/${Antlr4_ProjectTarget} )

  get_filename_component(Antlr4_InputFileBaseName ${Antlr4_InputFile} NAME_WE )

  list( APPEND Antlr4_GeneratorStatusMessage "Common Include-, Source- and Tokenfiles" )

  # Prepare list of generated targets
  list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}.h" )
  list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}.cpp" )
  list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}.tokens" )
  list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}.interp" )
  list( APPEND DependentTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}.tokens" )

  # process optional arguments ...

  if ( ( ARGC GREATER_EQUAL 3 ) AND ARGV2 )
    set(Antlr4_BuildListenerOption "-listener")

    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}BaseListener.h" )
    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}BaseListener.cpp" )
    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}Listener.h" )
    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}Listener.cpp" )

    list( APPEND Antlr4_GeneratorStatusMessage ", Listener Include- and Sourcefiles" )
  else()
    set(Antlr4_BuildListenerOption "-no-listener")
  endif ()
  
  if ( ( ARGC GREATER_EQUAL 4 ) AND ARGV3 )
    set(Antlr4_BuildVisitorOption "-visitor")

    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}BaseVisitor.h" )
    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}BaseVisitor.cpp" )
    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}Visitor.h" )
    list( APPEND Antlr4_GeneratedTargets "${Antlr4_GeneratedSrcDir}/${Antlr4_InputFileBaseName}Visitor.cpp" )

    list( APPEND Antlr4_GeneratorStatusMessage ", Visitor Include- and Sourcefiles" )
  else()
    set(Antlr4_BuildVisitorOption "-no-visitor")
  endif ()
  
  if ( (ARGC GREATER_EQUAL 5 ) AND (NOT ${ARGV4} STREQUAL "") )
    set(Antlr4_NamespaceOption "-package;${ARGV4}")

    list( APPEND Antlr4_GeneratorStatusMessage " in Namespace ${ARGV4}" )
  else()
    set(Antlr4_NamespaceOption "")
  endif ()
  
  if ( (ARGC GREATER_EQUAL 6 ) AND (NOT ${ARGV5} STREQUAL "") )
    set(Antlr4_AdditionalDependencies ${ARGV5})
  else()
    set(Antlr4_AdditionalDependencies "")
  endif ()

  if ( (ARGC GREATER_EQUAL 7 ) AND (NOT ${ARGV6} STREQUAL "") )
    set(Antlr4_LibOption "-lib;${ARGV6}")

    list( APPEND Antlr4_GeneratorStatusMessage " using Library ${ARGV6}" )
  else()
    set(Antlr4_LibOption "")
  endif ()

  if(NOT Java_FOUND)
    message(FATAL_ERROR "Java is required to process grammar or lexer files! - Use 'FIND_PACKAGE(Java COMPONENTS Runtime REQUIRED)'")
  endif()

  if(NOT EXISTS "${ANTLR4_JAR_LOCATION}")
    message(FATAL_ERROR "Unable to find antlr tool. ANTLR4_JAR_LOCATION:${ANTLR4_JAR_LOCATION}")
  endif()

  # The call to generate the files
  add_custom_command(
    OUTPUT ${Antlr4_GeneratedTargets}
    # Remove target directory
    COMMAND
    ${CMAKE_COMMAND} -E remove_directory ${Antlr4_GeneratedSrcDir}
    # Create target directory
    COMMAND
    ${CMAKE_COMMAND} -E make_directory ${Antlr4_GeneratedSrcDir}
    COMMAND
    # Generate files
    "${Java_JAVA_EXECUTABLE}" -jar "${ANTLR4_JAR_LOCATION}" -Werror -Dlanguage=Cpp ${Antlr4_BuildListenerOption} ${Antlr4_BuildVisitorOption} ${Antlr4_LibOption} -o "${Antlr4_GeneratedSrcDir}" ${Antlr4_NamespaceOption} "${Antlr4_InputFile}"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
    MAIN_DEPENDENCY "${Antlr4_InputFile}"
    DEPENDS ${Antlr4_AdditionalDependencies}
    )

  # set output variables in parent scope
  set( ANTLR4_INCLUDE_DIR_${Antlr4_ProjectTarget} ${Antlr4_GeneratedSrcDir} PARENT_SCOPE)
  set( ANTLR4_SRC_FILES_${Antlr4_ProjectTarget} ${Antlr4_GeneratedTargets} PARENT_SCOPE)
  set( ANTLR4_TOKEN_FILES_${Antlr4_ProjectTarget} ${DependentTargets} PARENT_SCOPE)
  set( ANTLR4_TOKEN_DIRECTORY_${Antlr4_ProjectTarget} ${Antlr4_GeneratedSrcDir} PARENT_SCOPE)

  # export generated cpp files into list
  foreach(generated_file ${Antlr4_GeneratedTargets})
  
    if (NOT CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
      set_source_files_properties(
        ${generated_file}
        PROPERTIES
        COMPILE_FLAGS -Wno-overloaded-virtual
        )
    endif ()

    if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
      set_source_files_properties(
        ${generated_file}
        PROPERTIES
        COMPILE_FLAGS -wd4251
        )
    endif ()

  endforeach(generated_file)

message(STATUS "Antlr4 ${Antlr4_ProjectTarget} - Building " ${Antlr4_GeneratorStatusMessage} )

endfunction()
